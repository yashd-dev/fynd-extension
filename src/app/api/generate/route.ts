import { NextRequest, NextResponse } from "next/server";
import { GoogleGenAI, Modality } from "@google/genai"
import { uploadFileToPixelbin } from "@/app/lib/pixelbinUpload";

export async function POST(req: NextRequest) {
    try {
        const formData = await req.formData();
        const prompt = formData.get("prompt")?.toString() || "make the similar image but in red color";

        const fileEntry = formData.get("file");
        if (!(fileEntry instanceof File)) {
            return NextResponse.json({ error: "No valid image file uploaded" }, { status: 400 });
        }
        const file = fileEntry;

        const arrayBuffer = await file.arrayBuffer();
        const base64Image = Buffer.from(arrayBuffer).toString("base64");

        const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "your_gemini_api_key" });

        const contents = [
            { text: prompt },
            {
                inlineData: {
                    mimeType: file.type,
                    data: base64Image,
                },
            },
        ];

        const response = await ai.models.generateContent({
            model: "gemini-2.0-flash-preview-image-generation",
            contents,
            config: {
                responseModalities: [Modality.TEXT, Modality.IMAGE],
            },
        });

        if (!response?.candidates?.[0]?.content?.parts) {
            return NextResponse.json({ error: "No response from Gemini API" }, { status: 500 });
        }

        let generatedText = "";
        let generatedImageBase64 = "";

        for (const part of response.candidates[0].content.parts) {
            if (part.text) {
                generatedText += part.text;
            } else if (part.inlineData?.data) {
                generatedImageBase64 = part.inlineData.data;
            }
        }

        if (!generatedImageBase64) {
            return NextResponse.json({ error: "No image generated by AI" }, { status: 500 });
        }

        // Use Buffer directly instead of Blob (Node.js environment)
        const imageBuffer = Buffer.from(generatedImageBase64, "base64");
        const _file = new File([imageBuffer], "generated-image.jpg", { type: "image/jpeg" });

        const uploadResult = await uploadFileToPixelbin(_file, {
            path: "generated",
            filename: "generated-image.jpg",
            format: "jpeg",
            tags: ["generated", "ai"],
            expiry: 3000,
        });

        return NextResponse.json({
            text: generatedText,
            imageUrl: uploadResult.url,
            metadata: uploadResult.metadata,
        });
    } catch (error: any) {
        console.error("Image generation failed:", error);
        return NextResponse.json({ error: error.message || "Failed to generate images" }, { status: 500 });
    }
}
